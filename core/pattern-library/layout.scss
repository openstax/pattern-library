$normal-margin: 1.5rem;
$tight-margin: 0.5rem;
$content-max: 120rem;
$text-content-max: 80rem;
$form-element-height: 5rem;

// Per https://zellwk.com/blog/media-query-units/
// In media queries, only em units handle consistently across browsers.
// Safari/iOS behaves differently from others when using rem or px and scaled fonts
// We want the numbers to be in 10-pixel ems, so scale them
$scale-factor: 10 / 16;
$wide-screen-min: 140em * $scale-factor;
$media-content-max: 120em * $scale-factor;
$phone-max: 60em * $scale-factor;
$tablet-max: 96em * $scale-factor;

// Includes the given (min) width
@mixin width-up-to($width) {
    @media (max-width: $width) {
        @content;
    }
}

// Excludes the given (max) width
@mixin wider-than($width) {
    @media (min-width: $width + 0.1) {
        @content;
    }
}

// Includes the max width, excludes the min width
@mixin width-between($width1, $width2) {
    @media (min-width: $width1 + 0.1) and (max-width: $width2) {
        @content;
    }
}

@mixin layout-container($max-width) {
    box-sizing: border-box;
    margin-left: auto;
    margin-right: auto;
    max-width: $max-width;
    padding-left: $normal-margin;
    padding-right: $normal-margin;
    width: 100%;
}

// %content and %text-content should be used via @extend because of the nesting
// rule, so there is no mixin
%content {
    @include layout-container($content-max);

    %content {
        padding: 0;
    }
}

%text-content {
    @include layout-container($text-content-max);

    %content,
    %text-content {
        padding: 0;
    }
}

// .basis-# defines a cell in the row
// At phone size, all are 100% width
// At tablet, .basis-2 thru .basis-6 are 50%, others still 100%
// At desktop, .basis-n is n/12 of the row
@mixin bases($prefix) {
    @for $b from 2 through 12 {
        #{$prefix}#{$b} {
            grid-column: auto / span 1;
            margin: 0;

            @if ($b > 6) {
                @include width-between($phone-max, $tablet-max) {
                    grid-column: auto / span 2;
                }
            }

            @include wider-than($tablet-max) {
                grid-column: auto / span $b;
            }
        }
    }
}

@mixin grid() {
    display: grid;
    grid-gap: 1rem 3rem;
    grid-template-columns: 1fr;

    @include width-between($phone-max, $tablet-max) {
        grid-template-columns: repeat(2, 1fr);
    }

    @include wider-than($tablet-max) {
        grid-template-columns: repeat(12, 1fr);
    }

    > * {
        grid-column: 1 / 1;

        @include width-between($phone-max, $tablet-max) {
            grid-column-end: 3;
        }

        @include wider-than($tablet-max) {
            grid-column-end: 13;
        }
    }
}

@mixin form() {
    @include layout-container($text-content-max);
    @include grid();

    background-color: ui-color(form-bg);
    grid-gap: 5rem 1rem;
    padding: 4rem;

    @include width-up-to($phone-max) {
        padding-left: 0;
        padding-right: 0;
    }
}

@mixin tight-row() {
    display: grid;
    grid-gap: 1rem;
    grid-template-columns: 1fr;

    @include width-between($phone-max, $tablet-max) {
        grid-template-columns: 1fr 1fr;
    }

    @include wider-than($tablet-max) {
        grid-template-columns: repeat(auto-fit, minmax(10rem, auto));
    }
}

%tight-row {
    @include tight-row();
}

%form {
    @include form();
}

// A container that centers content horizontally and vertically
@mixin center() {
    align-items: center;
    display: flex;
    justify-content: center;
    text-align: center;
}

// A rounded-cornered container with a drop shadow
$card-shadow: 0 2px 6px 0 rgba(ui-color(black), 0.25);
$card-shadow-hover: 0 8px 20px 0 rgba(ui-color(black), 0.25);
@mixin card() {
    border: 0;
    border-radius: 0.4rem;
    box-shadow: $card-shadow;

    @include wider-than($tablet-max) {
        &:hover {
            box-shadow: $card-shadow-hover;
        }
    }
}

%card {
    @include card();
}
