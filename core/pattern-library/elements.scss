@import 'headers';
@import 'elements/document';
@import 'elements/headings';

@each $name, $spec in $os-colors {
    #{".bg-" + $name} {
        background-color: $spec;
        @if index(light-blue gold yellow, $name) {
            color: text-color(normal);
        } @else {
            color: text-color(white);
        }
    }
}

// Content
//
// Apart from decorative elements, all content should be in a `.content` container,
// which constrains it to the middle column of the screen on wide screens. `.content`
// also includes padding to make "gutters" in a region, so that its content will not
// be flush against the edge. Multiple layers of `.content` do not add multiple layers
// of gutters.<br>
// The examples below have a blue-background `.content` block.
//
// Markup:
//     <div class="content {{modifier_class}} bg-blue">
//         <p>
//              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
//              incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
//              nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
//              Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
//              fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
//              culpa qui officia deserunt mollit anim id est laborum.
//          </p>
//          <p>
//               Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
//               incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
//               nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
//               Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
//               fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
//               culpa qui officia deserunt mollit anim id est laborum.
//           </p>
//     </div>
//
// .text - Narrows the block to the maximum width allowed for single-column text.
// The class can be applied to the `.content` block or inside it. It is applied to the
// blue `.content` block here. As you can see from the above example, paragraphs (`<p>`)
// are always constrained to the single-column text maximum width.
//
// Styleguide: Layout.Content

// Page content is constrained to the middle of the screen
.text,
p {
    @extend %text-content;
}

.flexrow {
    @extend %content;

    justify-content: flex-start;
    margin-left: 0;
    margin-right: 0;
    padding-left: 0;
    padding-right: 0;
}

// In a form, flexrow spacing is different
form,
.form {
    @extend %form;

    .flexrow {
        @extend %tightrow;
    }
}

.content {
    @extend %content;

    // FlexRow
    //
    // Multiple items in a `.flexrow` are laid out based on a 12-column grid. Each item
    // is given a class `.basis-`*n*, where *n* can be from 2 to 10. The FlexRow takes
    // care of sizing and wrapping appropriately on narrower screens.
    //
    // Markup:
    // <div class="content">
    //     <div class="flexrow">
    //         <div class="basis-2 bg-blue">Basis 2</div>
    //         <div class="basis-10 bg-gold">Basis 10</div>
    //     </div>
    //     <div class="flexrow">
    //         <div class="basis-2 bg-deep-green">Basis 2<br>extra-tall</div>
    //         <div class="basis-3 bg-gray">Basis 3</div>
    //         <div class="basis-4 bg-green">Basis 4</div>
    //         <div class="basis-3 bg-red">Basis 3</div>
    //     </div>
    //     <div class="flexrow">
    //         <div class="basis-7 bg-light-blue">Basis 7</div>
    //         <div class="basis-5 bg-light-gray">Basis 5</div>
    //     </div>
    //     <div class="flexrow">
    //         <div class="basis-4 bg-medium-blue">Basis 4</div>
    //         <div class="basis-8 bg-orange">Basis 8</div>
    //     </div>
    //     <div class="flexrow">
    //         <div class="bg-yellow">
    //             <div class="text bg-gold">
    //                 This is a <code>div.text</code> inside an ordinary div (no
    //                 <code>basis</code>) inside a <code>div.flexrow</code>.
    //             </div>
    //         </div>
    //     </div>
    //     <div class="flexrow">
    //         <button>Buttons</button>
    //         <button>in a</button>
    //         <button>flexrow</button>
    //         <button>are spaced</button>
    //         <button>more</button>
    //         <button>narrowly</button>
    //     </div>
    // </div>
    //
    // Styleguide: Layout.FlexRow

    // Grid System
    @for $b from 2 through 10 {
        .basis-#{$b} {
            @extend %griditem;
            @extend %basis-#{$b};
        }
    }

    // Form FlexRow
    //
    // In forms, flexrows are spaced further apart, while their contents are closer
    // together.
    //
    // Markup:
    // <div class="content">
    //     <form>
    //         <div class="flexrow">
    //             <div class="control-group basis-6">
    //                 <label class="field-label">Field Label</label>
    //                 <input placeholder="In a form, flexrow spacing is tighter">
    //             </div>
    //             <div class="control-group basis-6">
    //                 <label class="field-label">Field Label</label>
    //                 <input placeholder="In a form, flexrow spacing is tighter" pattern="g" required>
    //                 <div class="invalid-message">Message is placed absolutely</div>
    //             </div>
    //         </div>
    //         <div class="flexrow">
    //             <button class="basis-4">That is why</button>
    //             <button class="basis-4">Buttons</button>
    //             <button class="basis-4">Are close-spaced</button>
    //         </div>
    //         <div class="flexrow">
    //             <div class="basis-4 bg-blue">Some text</div>
    //             <div class="basis-4 bg-gray">Some text</div>
    //             <div class="basis-4 bg-gold">Some text</div>
    //         </div>
    //         <div class="flexrow">
    //             <textarea rows="4">Here is a textarea</textarea>
    //         </div>
    //     </form>
    // </div>
    //
    // Styleguide: Layout.FlexRow.Form

    // Control Group
    //
    // Optional containers `.field-label` and `.invalid-message`<br>
    // `.field-label` *must not* enclose the input element, so if you are wrapping
    // the input element in a `label`, put the text in a `span.field-label`.
    //
    // Markup:
    // <form>
    //     <div class="control-group">
    //         <label class="field-label">Field Label</label>
    //         <input placeholder="Placeholder text" pattern="g" required>
    //         <div class="invalid-message">Enter a g</div>
    //     </div>
    // </form>
    //
    // Styleguide: Form Elements.Control Group

    // Lays out form element with field-label and invalid-message (each optional)
    .control-group {
        @extend %control-group;

        .field-label {
            @extend %field-label;
        }

        .invalid-message {
            @extend %invalid-message;
        }
    }

}

// Copy
//
// Markup:
// <div class="{{modifier_class}}">This is some copy</div>
//
// .copy-large - larger copy
//
// Styleguide: Typography.Copy

.copy-large {
    @extend %text-body-large;
}

// Links
//
// Text shades slightly in `:hover` and `:active` states.
//
// Markup:
// <a href="#">Link text</a>
//
// Styleguide: Typography.Links

a {
    @include link();
}

$form-border-width: 0.1rem;

@mixin form-border {
    border: $form-border-width solid ui-color(form-border);
}

// Buttons
//
// Subtle color changes on hover, focus, and active states
//
// Markup:
// <button class="{{modifier_class}}">Native button</button>
// <input type="button" class="{{modifier_class}}" value="input[type='button']"/>
// <span class="btn {{modifier_class}}">Anything styled like a button</span>
//
// .small - Not as tall
// .wide - The width of the enclosing container
// .primary - Colored to stand out
// .secondary - Colored to stand out a bit less than primary
//
// Styleguide: Form Elements.Buttons

button,
[type="button"],
[type="submit"],
[type="reset"],
.btn {
    @extend %button;

    &.primary,
    &[type="submit"] {
        @extend %primary;
    }

    &.secondary,
    &[type="reset"] {
        @extend %secondary;
    }
}

// Form
//
// Forms get a slightly different background color and a healthy bit of padding to
// set them off from other containers. These stylings only apply to `<form>` tags
// that are inside `.content` or themselves have the `.content` class; use the
// `.form` class to apply to anything else.
//
// Markup:
// <form class="content">A form container</form>
// <div class="form">A container styled the same</div>
//
// Styleguide: Form Elements.Form
%content form,
form%content,
.form {
    @extend %form;
}

label {
    @extend %text-helper-label;
    color: text-color(helper);
    width: 100%;

    > * {
        display: block;
    }
}

input {
    height: $form-element-height;
}

input:not([type="button"]):not([type="submit"]),
textarea {
    @extend %text-body-regular;
    @include form-border;
    background-color: ui-color(white);
    box-sizing: border-box;
    color: text-color(normal);
    flex: 0 0 100%;
    padding: 0 $normal-margin;
    width: 100%;

    &:focus {
        border: thin solid os-color(light-blue);
        box-shadow: 0 0 4px 0 rgba(os-color(light-blue), 0.5);
        outline: none;
    }

    &::placeholder {
        color: text-color(helper);
    }

    &:invalid {
        background-color: ui-color(error-bg);
        border: thin solid ui-color(error-border);
        color: text-color(error);

        ~ .invalid-message {
            @extend %text-helper-label;
            color: text-color(error);
            display: block;
        }
    }

    ~ .invalid-message {
        display: none;
        pointer-events: none;
    }
}

// Button Bar
//
// A row of buttons or button-styled elements used like a radio group
//
// Markup:
// <div class="button-bar">
//     <button>Option 1</button>
//     <button aria-selected="true">Option 2</button>
//     <div class="btn">Option 3</div>
//     <input type="button" value="Option 4">
// </div>
//
// Styleguide: Form Elements.Button Bar

.button-bar {
    @extend %button-bar;

    > [aria-selected="true"] {
        @extend %selected;
    }
}
