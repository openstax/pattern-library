@import 'headers';

html {
    // This resets rem from 16px to 10px
    font-size: 62.5%;
}

body {
    @extend %text-body-regular;

    background-color: ui-color(page-bg);
    color: text-color(normal);
    font-family: 'Neue Helvetica W01', sans-serif;
    margin: 0;
}

// Content
//
// Apart from decorative elements, all content should be in a `.content` container,
// which constrains it to the middle column of the screen on wide screens. `.content`
// also includes padding to make "gutters" in a region, so that its content will not
// be flush against the edge. Multiple layers of `.content` do not add multiple layers
// of gutters.<br>
// The examples below have a blue-background `.content` block.
//
// Markup:
//     <div class="content {{modifier_class}} bg-blue">
//         <p>
//              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
//              incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
//              nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
//              Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
//              fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
//              culpa qui officia deserunt mollit anim id est laborum.
//          </p>
//          <p>
//               Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
//               incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
//               nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
//               Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
//               fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
//               culpa qui officia deserunt mollit anim id est laborum.
//           </p>
//     </div>
//
// .text - Narrows the block to the maximum width allowed for single-column text.
// The class can be applied to the `.content` block or inside it. It is applied to the
// blue `.content` block here. As you can see from the above example, paragraphs (`<p>`)
// are always constrained to the single-column text maximum width.
//
// Styleguide: Layout.Content

// Page content is constrained to the middle of the screen
.content {
    @extend %content;

    &.text,
    .text,
    p {
        @extend %text-content;
    }

    // FlexRow
    //
    // Multiple items in a `.flexrow` are laid out based on a 12-column grid. Each item
    // is given a class `.basis-`*n*, where *n* can be from 2 to 10. The FlexRow takes
    // care of sizing and wrapping appropriately on narrower screens.
    //
    // Markup:
    // <div class="content">
    //     <div class="flexrow">
    //         <div class="basis-2 bg-blue">Basis 2</div>
    //         <div class="basis-10 bg-gold">Basis 10</div>
    //     </div>
    //     <div class="flexrow">
    //         <div class="basis-2 bg-deep-green">Basis 2<br>extra-tall</div>
    //         <div class="basis-3 bg-gray">Basis 3</div>
    //         <div class="basis-4 bg-green">Basis 4</div>
    //         <div class="basis-3 bg-red">Basis 3</div>
    //     </div>
    //     <div class="flexrow">
    //         <div class="basis-7 bg-light-blue">Basis 7</div>
    //         <div class="basis-5 bg-light-gray">Basis 5</div>
    //     </div>
    //     <div class="flexrow">
    //         <div class="basis-4 bg-medium-blue">Basis 4</div>
    //         <div class="basis-8 bg-orange">Basis 8</div>
    //     </div>
    //     <div class="flexrow">
    //         <div class="bg-yellow">
    //             <div class="text bg-gold">
    //                 This is a <code>div.text</code> inside an ordinary div (no
    //                 <code>basis</code>) inside a <code>div.flexrow</code>.
    //             </div>
    //         </div>
    //     </div>
    //     <div class="flexrow">
    //         <button>Buttons</button>
    //         <button>in a</button>
    //         <button>flexrow</button>
    //         <button>are spaced</button>
    //         <button>more</button>
    //         <button>narrowly</button>
    //     </div>
    // </div>
    //
    // Styleguide: Layout.FlexRow

    // Grid System
    .flexrow {
        @include bases-with-margin($normal-margin);

        align-items: center;
        display: flex;
        flex-flow: row wrap;
        margin: 0 (-$normal-margin);

        > * {
            margin: 0.5rem $normal-margin;
            width: 100%;
        }

        > button,
        > .btn {
            // Trick to make the wrapped buttons have the correct left margin
            margin: 0.5rem #{($tight-margin - $normal-margin) / 2} 0.5rem $normal-margin;
            width: auto;

            &:last-child {
                margin-right: $normal-margin;
            }
        }
    }

    // Form FlexRow
    //
    // In forms, flexrows are spaced further apart, while their contents are closer
    // together.
    //
    // Markup:
    // <div class="content">
    //     <form>
    //         <div class="flexrow">
    //             <div class="control-group basis-6">
    //                 <label class="field-label">Field Label</label>
    //                 <input placeholder="In a form, flexrow spacing is tighter">
    //             </div>
    //             <div class="control-group basis-6">
    //                 <label class="field-label">Field Label</label>
    //                 <input placeholder="In a form, flexrow spacing is tighter" pattern="g" required>
    //                 <div class="invalid-message">Message is placed absolutely</div>
    //             </div>
    //         </div>
    //         <div class="flexrow">
    //             <div class="basis-4"><button class="wide">That is why</button></div>
    //             <div class="basis-4"><button class="wide">Buttons</button></div>
    //             <div class="basis-4"><button class="wide">Are close-spaced</button></div>
    //         </div>
    //         <div class="flexrow">
    //             <div class="basis-4 bg-blue">Some text</div>
    //             <div class="basis-4 bg-gray">Some text</div>
    //             <div class="basis-4 bg-gold">Some text</div>
    //         </div>
    //         <div class="flexrow">
    //             <textarea rows="4">Here is a textarea</textarea>
    //         </div>
    //     </form>
    // </div>
    //
    // Styleguide: Layout.FlexRow.Form

    // In a form, flexrow spacing is different
    form .flexrow,
    .form .flexrow {
        @include bases-with-margin($tight-margin);
        margin: 0 (-$tight-margin);

        > * {
            margin: 2rem $tight-margin;
            max-width: calc(100% - #{2 * $tight-margin});
        }
    }

    // Control Group
    //
    // Optional containers `.field-label` and `.invalid-message`<br>
    // `.field-label` *must not* enclose the input element, so if you are wrapping
    // the input element in a `label`, put the text in a `span.field-label`.
    //
    // Markup:
    // <form>
    //     <div class="control-group">
    //         <label class="field-label">Field Label</label>
    //         <input placeholder="Placeholder text" pattern="g" required>
    //         <div class="invalid-message">Enter a g</div>
    //     </div>
    // </form>
    //
    // Styleguide: Form Elements.Control Group

    // Lays out form element with field-label and invalid-message (each optional)
    .control-group {
        display: block;
        height: $form-element-height;
        margin: 0;
        position: relative;
        width: 100%;

        .field-label,
        .invalid-message,
        .invalid-message {
            position: absolute;
            top: 0;
            transform: translateY(-104%);
            width: 100%;
        }

        .invalid-message,
        .invalid-message {
            bottom: 0;
            transform: translateY(100%);
        }
    }

}

// Headings
//
// Each heading size has a placeholder selector, so you can use, e.g.,
// <code>
// @extend %text-h1;
// </code>
// to apply h1-style font to some other element type.
//
// Markup:
// <div class="{{modifier_class}}">
//     <div class="hero"><h1>H1 in a hero (%text-hero-h1)</h1></div>
//     <h1>H1 heading (%text-h1)</h1>
//     <h2>H2 heading (%text-h2)</h2>
//     <h3>H3 heading (%text-h3)</h3>
//     <h4>H4 heading (%text-h4)</h4>
// </div>
//
// .tutor - if enclosed in a `.tutor`, uses OpenStax Tutor typography. Recommend
// putting this class on the `body` element.
//
// Styleguide: Typography.Headings

h1,
h2,
h3,
h4,
p,
form,
.form {
    @extend %block-item;
}

h1 {
    @extend %text-h1;
}

.hero h1 {
    @extend %text-hero-h1;
}

h2 {
    @extend %text-h2;
    margin-top: 2rem;
}

h3 {
    @extend %text-h3;
    margin-top: 1.5rem;
}

h4 {
    @extend %text-h4;
    margin-top: 1rem;
}

// Copy
//
// Markup:
// <div class="{{modifier_class}}">This is some copy</div>
//
// .copy-large - larger copy
//
// Styleguide: Typography.Copy

.copy-large {
    @extend %text-body-large;
}

// Links
//
// Text shades slightly in `:hover` and `:active` states.
//
// Markup:
// <a href="#">Link text</a>
//
// Styleguide: Typography.Links

a {
    color: text-color(link);
    text-decoration: underline;

    &:hover,
    &:active {
        color: text-color(link-hover);
    }

    &.btn {
        text-decoration: none;
    }
}

@mixin button-behavior {
    @extend %center;
    cursor: default;
    display: inline-flex;
    user-select: none;
}

$form-border-width: 0.1rem;

@mixin form-border {
    border: $form-border-width solid ui-color(form-border);
}

// Buttons
//
// Subtle color changes on hover, focus, and active states
//
// Markup:
// <button class="{{modifier_class}}">Native button</button>
// <input type="button" class="{{modifier_class}}" value="input[type='button']"/>
// <div class="btn {{modifier_class}}">Anything styled like a button</div>
//
// .small - Not as tall
// .wide - The width of the enclosing container
// .primary - Colored to stand out
// .secondary - Colored to stand out a bit less than primary
//
// Styleguide: Form Elements.Buttons

.btn {
    @include button-behavior;
}

button,
[type="button"],
.btn {
    @extend %text-body-regular;
    @include form-border;
    background-color: ui-color(default);
    border-radius: 0.2rem;
    color: text-color(normal);
    font-weight: normal;
    height: $form-element-height;
    margin: $tight-margin;
    padding: 0 3rem;

    &:hover,
    &:focus {
        background-color: ui-color(default-hover);
    }

    &:active {
        background-color: ui-color(default-active);
    }

    &.small {
        @extend %text-helper-label;
        height: 3rem;
        padding: 0 2rem;
    }

    &.wide {
        padding: 0;
        width: calc(100% - #{$tight-margin});
    }

    @each $ui-type in primary, secondary {
        &.#{$ui-type} {
            background-color: ui-color($ui-type);
            border: 0;
            color: text-color(white);
            font-weight: bold;

            &:hover,
            &:focus {
                background-color: ui-color(#{$ui-type}-hover);
            }

            &:active {
                background-color: ui-color(#{$ui-type}-active);
            }
        }
    }
}

// Form
//
// Forms get a slightly different background color and a healthy bit of padding to
// set them off from other containers. These stylings only apply to `<form>` tags
// that are inside `.content` or themselves have the `.content` class; use the
// `.form` class to apply to anything else.
//
// Markup:
// <form class="content">A form container</form>
// <div class="form">A container styled the same</div>
//
// Styleguide: Form Elements.Form
%content form,
form%content,
.form {
    background-color: ui-color(form-bg);
    padding: 4rem;
}

label {
    @extend %text-helper-label;
    color: text-color(helper);
    width: 100%;

    > * {
        display: block;
    }
}

input {
    height: $form-element-height;
}

input:not([type="button"]):not([type="submit"]),
textarea {
    @extend %text-body-regular;
    @include form-border;
    background-color: ui-color(white);
    color: text-color(normal);
    padding: 0 $normal-margin;
    width: 100%;

    &:focus {
        border: thin solid os-color(light-blue);
        box-shadow: 0 0 4px 0 rgba(os-color(light-blue), 0.5);
        outline: none;
    }

    &::placeholder {
        color: text-color(helper);
    }

    &:invalid {
        background-color: ui-color(error-bg);
        border: thin solid ui-color(error-border);
        color: ui-color(error-fg);

        ~ .invalid-message {
            @extend %text-helper-label;
            color: ui-color(error-fg);
            display: block;
        }
    }

    ~ .invalid-message {
        display: none;
        pointer-events: none;
    }
}

// Button Bar
//
// A row of buttons or button-styled elements used like a radio group
//
// Markup:
// <div class="button-bar">
//     <button>Option 1</button>
//     <button aria-selected="true">Option 2</button>
//     <div class="btn">Option 3</div>
//     <input type="button" value="Option 4">
// </div>
//
// Styleguide: Form Elements.Button Bar

.button-bar {
    @include form-border;
    align-items: baseline;
    border-radius: 0.2rem;
    display: inline-flex;
    height: $form-element-height;
    padding: 0;

    > * {
        background-color: ui-color(white);
        border: 0;
        border-radius: 0;
        color: text-color(button-bar);
        height: 100%;
        margin: 0;
        padding: 0 3rem;
        white-space: nowrap;

        &:focus {
            z-index: 1;
        }

        &:not(:last-child) {
            border-right: thin solid ui-color(form-border);
        }

        &:hover {
            background-color: ui-color(form-bg);
        }

        &[aria-selected="true"] {
            background-color: ui-color(default-hover);
            color: text-color(normal);
        }
    }

    > :not(button):not(input) {
        // Compensate for anomaly in how buttons vs non-buttons are rendered
        transform: translateY(-0.1rem);
    }
}
