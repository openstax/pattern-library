@import 'headers';

html {
    font-family: 'Neue Helvetica W01', sans-serif;
    // This resets rem from 16px to 10px
    font-size: 62.5%;
}

body {
    @include set-font(body-regular);

    background-color: ui-color(page-bg);
    color: text-color(normal);
    margin: 0;
    min-height: 100vh;
}

// Headings
//
// Each heading size has a placeholder selector, so you can use, e.g.,
// <code>
// @extend %text-h1;
// </code>
// to apply h1-style font to some other element type.
//
// Markup:
// <div class="{{modifier_class}}">
//     <div class="hero"><h1>H1 in a hero (%text-hero-h1)</h1></div>
//     <h1>H1 heading (%text-h1)</h1>
//     <h2>H2 heading (%text-h2)</h2>
//     <h3>H3 heading (%text-h3)</h3>
//     <h4>H4 heading (%text-h4)</h4>
// </div>
//
// .tutor - if enclosed in a `.tutor`, uses OpenStax Tutor typography. Recommend
// putting this class on the `body` element.
//
// Styleguide: Typography.Headings

h1,
h2,
h3,
h4 {
    margin-bottom: 1rem;
}

// These should be @extend %text-h1, etc., but that causes SASS to duplicated
// lots of stuff.
h1 {
    @include set-font(h1);
}

.hero h1 {
    @include set-font(hero-h1);
}

h2 {
    @include set-font(h2);
    margin-top: 2rem;
}

h3 {
    @include set-font(h3);
    margin-top: 1.5rem;
}

h4 {
    @include set-font(h4);
    margin-top: 1rem;
}

.tutor {
    @extend %tutor;
}

@each $name, $spec in $os-colors {
    #{".bg-" + $name} {
        background-color: $spec;
        @if index(light-blue gold yellow, $name) {
            color: text-color(normal);
        } @else {
            color: text-color(white);
        }
    }
}

// Content
//
// Apart from decorative elements, all content should be in a `.content` container,
// which constrains it to the middle column of the screen on wide screens. `.content`
// also includes padding to make "gutters" in a region, so that its content will not
// be flush against the edge. Multiple layers of `.content` do not add multiple layers
// of gutters.<br>
// The examples below have a blue-background `.content` block.
//
// Markup:
//     <div class="content {{modifier_class}} bg-blue">
//         <p>
//              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
//              incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
//              nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
//              Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
//              fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
//              culpa qui officia deserunt mollit anim id est laborum.
//          </p>
//          <p>
//               Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor
//               incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis
//               nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
//               Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
//               fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in
//               culpa qui officia deserunt mollit anim id est laborum.
//           </p>
//     </div>
//
// .text - Narrows the block to the maximum width allowed for single-column text.
// The class can be applied to the `.content` block or inside it. It is applied to the
// blue `.content` block here. As you can see from the above example, paragraphs (`<p>`)
// are always constrained to the single-column text maximum width.
//
// Styleguide: Layout.Content

// Page content is constrained to the middle of the screen
.text,
p {
    @extend %text-content;
}

// In a form, flexrow spacing is different
form,
.form {
    @include form();
}

.grid {
    @include grid();
}

.button-group {
    @include tight-row();

    max-width: 100%;
}

.content {
    @extend %content;

    // Grid layout
    //
    // Adding the `.grid` class to a container sets it up as a 12-column grid for
    // desktop displays, a 2-column grid for tablets, and a 1-column grid for phone.
    // Contents by default will be 100% of the grid width. Adding a class of `basis-2`
    // makes the item 2 columns wide, `basis-3` makes it 3 columns wide, etc.
    //
    // There is no row element. The items will wrap as necessary. Buttons should be
    // put into a `.button-group`, which will space them closer together. You will
    // need to ensure that the buttons fit narrow desktop screens. Buttons that are
    // naturally wider than 10rem may get too small for their contents.
    //
    // Markup:
    // <div class="content grid">
    //     <div class="basis-2 bg-blue">Basis 2</div>
    //     <div class="basis-10 bg-gold">Basis 10</div>
    //     <div class="basis-2 bg-deep-green">Basis 2<br>extra-tall</div>
    //     <div class="basis-3 bg-gray">Basis 3</div>
    //     <div class="basis-4 bg-green">Basis 4</div>
    //     <div class="basis-3 bg-red">Basis 3</div>
    //     <div class="basis-7 bg-light-blue">Basis 7</div>
    //     <div class="basis-5 bg-light-gray">Basis 5</div>
    //     <div class="button-group">
    //         <button>Buttons</button>
    //         <button>in a</button>
    //         <button>.button-group</button>
    //         <button>are spaced</button>
    //         <button>more</button>
    //         <button>narrowly</button>
    //     </div>
    //     <div class="basis-4 bg-medium-blue">Basis 4</div>
    //     <div class="basis-8 bg-orange">Basis 8</div>
    //     <div class="bg-yellow">
    //         <div class="text bg-gold">
    //             This is a <code>div.text</code> inside an ordinary div (no
    //             <code>basis</code>) inside another <code>div</code>.
    //         </div>
    //     </div>
    // </div>
    //
    // Styleguide: Layout.Grid

    // Grid System
    @include bases('.basis-');

    // Form Layout
    //
    // A form is a grid whose rows are spaced further apart, while their
    // contents are closer together.
    //
    // Markup:
    // <div class="content">
    //     <form>
    //         <div class="control-group basis-6">
    //             <label class="field-label">Field Label</label>
    //             <input placeholder="In a form, row spacing is tighter">
    //         </div>
    //         <div class="control-group basis-6">
    //             <label class="field-label">Field Label</label>
    //             <input placeholder="In a form, row spacing is tighter" pattern="g" required>
    //             <div class="invalid-message">Message is placed absolutely</div>
    //         </div>
    //         <button class="basis-4">That is why</button>
    //         <button class="basis-4">Buttons</button>
    //         <button class="basis-4">Are close-spaced</button>
    //         <div class="basis-4 bg-blue">Some text</div>
    //         <div class="basis-4 bg-gray">Some text</div>
    //         <div class="basis-4 bg-gold">Some text</div>
    //         <textarea rows="4">Here is a textarea</textarea>
    //     </form>
    // </div>
    //
    // Styleguide: Layout.Grid.Form

    // Control Group
    //
    // Optional containers `.field-label` and `.invalid-message`<br>
    // `.field-label` *must not* enclose the input element, so if you are wrapping
    // the input element in a `label`, put the text in a `span.field-label`.
    // Add `delay-validation` class to avoid showing validation state
    //
    // Markup:
    // <div class="content">
    //     <form>
    //         <div class="control-group basis-12">
    //             <label class="field-label">Field Label</label>
    //             <input placeholder="Placeholder text" pattern="g" required>
    //             <div class="invalid-message">Enter a g</div>
    //         </div>
    //         <div class="control-group basis-6">
    //             <label class="field-label">Field Label</label>
    //             <input class="delay-validation" placeholder="Invalid, but does not show" pattern="g" required>
    //             <div class="invalid-message">Enter a g</div>
    //         </div>
    //     </form>
    // </div>
    //
    // Styleguide: Form Elements.Control Group

    // Lays out form element with field-label and invalid-message (each optional)
    .control-group {
        @extend %control-group;

        .field-label {
            @extend %field-label;
        }

        .invalid-message {
            @extend %invalid-message;
        }
    }

}

// Copy
//
// Markup:
// <div class="{{modifier_class}}">This is some copy</div>
//
// .copy-large - larger copy
//
// Styleguide: Typography.Copy

.copy-large {
    @include set-font(body-large);
}

// Links
//
// Text shades slightly in `:hover` and `:active` states.
// Separate elements inside links (think icon and text) will be separated by 7px.
// To avoid separation, wrap them in a span.
//
// Markup:
// Here is some <a href="#">Link text</a>
// and some <a href="#"><i>icon</i>link text</a>
//
// Styleguide: Typography.Links

a {
    @include link();
}

// Buttons
//
// Subtle color changes on hover, focus, and active states
//
// Markup:
// <button class="{{modifier_class}}">Native button</button>
// <input type="button" class="{{modifier_class}}" value="input[type='button']"/>
// <span class="btn {{modifier_class}}">Anything styled like a button</span>
//
// .medium - Less vertical padding
// .small - Smaller font, less padding on all sides
// .wide - The width of the enclosing container
// .primary - Colored to stand out
// .secondary - Colored to stand out a bit less than primary
//
// Styleguide: Form Elements.Buttons

button,
[type="button"],
[type="submit"],
[type="reset"],
.btn {
    // This actually reduces total code size
    @extend %button;

    &.primary,
    &[type="submit"] {
        @extend %primary;
    }

    &.secondary,
    &[type="reset"] {
        @extend %secondary;
    }
}

// Tabs
//
// Tabs are headers of ordinary text color and size in a `.tab-group`
// The active tab has a green border-bottom.
//
// Markup:
// <div class="content">
//     <div class="tab-group">
//         <div class="tab active">Section 1</div>
//         <div class="tab">Section 2</div>
//         <div class="tab">Section 3</div>
//     </div>
//     <hr class="tab-baseline">
// </div>
//
// Styleguide: Layout.Tabs
.tab-group {
    @include tab-group();

    .tab {
        @extend %tab;

        &.active,
        &.selected {
            @extend %active;
        }
    }
}

.tab-baseline {
    @include tab-baseline();
}

// Form
//
// Forms get a slightly different background color and a healthy bit of padding to
// set them off from other containers. These stylings only apply to `<form>` tags
// that are inside `.content` or themselves have the `.content` class; use the
// `.form` class to apply to anything else.
//
// Markup:
// <div class="content">
//     <form class="content">A form container</form>
//     <div class="form">A container styled the same</div>
// </div>
//
// Styleguide: Form Elements.Form
%content form,
form%content,
.form {
    @include form();
}

label {
    @include set-font(helper-label);

    color: text-color(helper);
    width: 100%;

    > * {
        display: block;
    }
}

input {
    height: $form-element-height;
}

input:not([type="button"]):not([type="submit"]):not([type="reset"]):not([type="image"]):not([type="radio"]):not([type="checkbox"]),
textarea {
    @include non-button-input();

    .invalid-message {
        @extend %invalid-message;
    }
}

// Button Bar
//
// A row of buttons or button-styled elements used like a radio group
//
// Markup:
// <div class="button-bar">
//     <button>Option 1</button>
//     <button aria-selected="true">Option 2</button>
//     <div class="btn">Option 3</div>
//     <input type="button" value="Option 4">
// </div>
//
// Styleguide: Form Elements.Button Bar

.button-bar {
    @include button-bar();

    > [aria-selected="true"] {
        @extend %selected;
    }
}


// Confirmation boxes
//
//
//
// Markup:
// <div class="content">
//     <div class="message-box">Success message</div>
//     <div class="message-box error">Error message</div>
// </div>
//
// Styleguide: Messages.Confirmation boxes

.message-box {
    @include message-box();

    &.error {
        @extend %error;
    }
}

// Modal dialogs
//
// Font-awesome icons should be used, but are not available to this demo page.
// Modals should additionally have
// ```
// position: fixed;
// left: 50%;
// top: 50%;
// transform: translate(-50%, -50%);
// z-index: _some high number_;
// ```
//
// Markup:
// <div class="modal">
//     <div class="heading">
//         Modal header
//         <i class="close-icon">&times;</i>
//     </div>
//     <p>
//         Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
//         eiusmod tempor incididunt ut labore et dolore magna liqua. Ut
//         enim ad minim veniam, quis nostrud exercitation ullamco laboris
//         nisi ut aliquip ex ea commodo consequat.
//     </p>
//     <div class="button-group">
//         <button type="button" class="primary">Primary action</button>
//         <button type="button">Default</button>
//     </div>
// </div>
// <hr>
// <div class="modal error">
//     <div class="heading">
//         <i class="error-icon">!</i>
//         Error heading
//     </div>
//     <p>
//       Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
//       eiusmod tempor incididunt ut labore et dolore magna liqua. Ut
//       enim ad minim veniam, quis nostrud exercitation ullamco laboris
//       nisi ut aliquip ex ea commodo consequat.
//     </p>
//     <div><a href="https://packages.cnx.org/pattern-library/latest/">Link text</a></div>
// </div>
//
// Styleguide: Messages.Modal dialogs

.modal {
    @include modal();
}
